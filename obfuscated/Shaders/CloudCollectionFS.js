function a918_0x59b8(_0x111ed8,_0x36cf17){var _0x12c812=a918_0x12c8();return a918_0x59b8=function(_0x59b87e,_0x37ea7b){_0x59b87e=_0x59b87e-0x105;var _0x5500bc=_0x12c812[_0x59b87e];return _0x5500bc;},a918_0x59b8(_0x111ed8,_0x36cf17);}var a918_0x341b51=a918_0x59b8;(function(_0x55fddb,_0x1aec9c){var _0x573eee=a918_0x59b8,_0x33d2cd=_0x55fddb();while(!![]){try{var _0x4da886=-parseInt(_0x573eee(0x10b))/0x1*(-parseInt(_0x573eee(0x107))/0x2)+-parseInt(_0x573eee(0x10a))/0x3+parseInt(_0x573eee(0x108))/0x4+-parseInt(_0x573eee(0x109))/0x5*(parseInt(_0x573eee(0x10d))/0x6)+parseInt(_0x573eee(0x110))/0x7*(-parseInt(_0x573eee(0x10e))/0x8)+parseInt(_0x573eee(0x105))/0x9*(-parseInt(_0x573eee(0x10c))/0xa)+parseInt(_0x573eee(0x106))/0xb*(parseInt(_0x573eee(0x10f))/0xc);if(_0x4da886===_0x1aec9c)break;else _0x33d2cd['push'](_0x33d2cd['shift']());}catch(_0x558b35){_0x33d2cd['push'](_0x33d2cd['shift']());}}}(a918_0x12c8,0xd510f));export default a918_0x341b51(0x111);function a918_0x12c8(){var _0x174d02=['155BAqTGj','918225miClUF','3bCQPlY','10aNGQzL','161052hEJvMy','11637144ELWnPw','120bVkQyn','7fCpgoF','uniform\x20sampler2D\x20u_noiseTexture;\x0auniform\x20vec3\x20u_noiseTextureDimensions;\x0auniform\x20float\x20u_noiseDetail;\x0avarying\x20vec2\x20v_offset;\x0avarying\x20vec3\x20v_maximumSize;\x0avarying\x20vec4\x20v_color;\x0avarying\x20float\x20v_slice;\x0avarying\x20float\x20v_brightness;\x0afloat\x20wrap(float\x20value,\x20float\x20rangeLength)\x20{\x0aif(value\x20<\x200.0)\x20{\x0afloat\x20absValue\x20=\x20abs(value);\x0afloat\x20modValue\x20=\x20mod(absValue,\x20rangeLength);\x0areturn\x20mod(rangeLength\x20-\x20modValue,\x20rangeLength);\x0a}\x0areturn\x20mod(value,\x20rangeLength);\x0a}\x0avec3\x20wrapVec(vec3\x20value,\x20float\x20rangeLength)\x20{\x0areturn\x20vec3(wrap(value.x,\x20rangeLength),\x0awrap(value.y,\x20rangeLength),\x0awrap(value.z,\x20rangeLength));\x0a}\x0afloat\x20textureSliceWidth\x20=\x20u_noiseTextureDimensions.x;\x0afloat\x20noiseTextureRows\x20=\x20u_noiseTextureDimensions.y;\x0afloat\x20inverseNoiseTextureRows\x20=\x20u_noiseTextureDimensions.z;\x0afloat\x20textureSliceWidthSquared\x20=\x20textureSliceWidth\x20*\x20textureSliceWidth;\x0avec2\x20inverseNoiseTextureDimensions\x20=\x20vec2(noiseTextureRows\x20/\x20textureSliceWidthSquared,\x0ainverseNoiseTextureRows\x20/\x20textureSliceWidth);\x0avec2\x20voxelToUV(vec3\x20voxelIndex)\x20{\x0avec3\x20wrappedIndex\x20=\x20wrapVec(voxelIndex,\x20textureSliceWidth);\x0afloat\x20column\x20=\x20mod(wrappedIndex.z,\x20textureSliceWidth\x20*\x20inverseNoiseTextureRows);\x0afloat\x20row\x20=\x20floor(wrappedIndex.z\x20/\x20textureSliceWidth\x20*\x20noiseTextureRows);\x0afloat\x20xPixelCoord\x20=\x20wrappedIndex.x\x20+\x20column\x20*\x20textureSliceWidth;\x0afloat\x20yPixelCoord\x20=\x20wrappedIndex.y\x20+\x20row\x20*\x20textureSliceWidth;\x0areturn\x20vec2(xPixelCoord,\x20yPixelCoord)\x20*\x20inverseNoiseTextureDimensions;\x0a}\x0avec4\x20lerpSamplesX(vec3\x20voxelIndex,\x20float\x20x)\x20{\x0avec2\x20uv0\x20=\x20voxelToUV(voxelIndex);\x0avec2\x20uv1\x20=\x20voxelToUV(voxelIndex\x20+\x20vec3(1.0,\x200.0,\x200.0));\x0avec4\x20sample0\x20=\x20texture2D(u_noiseTexture,\x20uv0);\x0avec4\x20sample1\x20=\x20texture2D(u_noiseTexture,\x20uv1);\x0areturn\x20mix(sample0,\x20sample1,\x20x);\x0a}\x0avec4\x20sampleNoiseTexture(vec3\x20position)\x20{\x0avec3\x20recenteredPos\x20=\x20position\x20+\x20vec3(textureSliceWidth\x20/\x202.0);\x0avec3\x20lerpValue\x20=\x20fract(recenteredPos);\x0avec3\x20voxelIndex\x20=\x20floor(recenteredPos);\x0avec4\x20xLerp00\x20=\x20lerpSamplesX(voxelIndex,\x20lerpValue.x);\x0avec4\x20xLerp01\x20=\x20lerpSamplesX(voxelIndex\x20+\x20vec3(0.0,\x200.0,\x201.0),\x20lerpValue.x);\x0avec4\x20xLerp10\x20=\x20lerpSamplesX(voxelIndex\x20+\x20vec3(0.0,\x201.0,\x200.0),\x20lerpValue.x);\x0avec4\x20xLerp11\x20=\x20lerpSamplesX(voxelIndex\x20+\x20vec3(0.0,\x201.0,\x201.0),\x20lerpValue.x);\x0avec4\x20yLerp0\x20=\x20mix(xLerp00,\x20xLerp10,\x20lerpValue.y);\x0avec4\x20yLerp1\x20=\x20mix(xLerp01,\x20xLerp11,\x20lerpValue.y);\x0areturn\x20mix(yLerp0,\x20yLerp1,\x20lerpValue.z);\x0a}\x0abool\x20intersectSphere(vec3\x20origin,\x20vec3\x20dir,\x20float\x20slice,\x0aout\x20vec3\x20point,\x20out\x20vec3\x20normal)\x20{\x0afloat\x20A\x20=\x20dot(dir,\x20dir);\x0afloat\x20B\x20=\x20dot(origin,\x20dir);\x0afloat\x20C\x20=\x20dot(origin,\x20origin)\x20-\x200.25;\x0afloat\x20discriminant\x20=\x20(B\x20*\x20B)\x20-\x20(A\x20*\x20C);\x0aif(discriminant\x20<\x200.0)\x20{\x0areturn\x20false;\x0a}\x0afloat\x20root\x20=\x20sqrt(discriminant);\x0afloat\x20t\x20=\x20(-B\x20-\x20root)\x20/\x20A;\x0aif(t\x20<\x200.0)\x20{\x0at\x20=\x20(-B\x20+\x20root)\x20/\x20A;\x0a}\x0apoint\x20=\x20origin\x20+\x20t\x20*\x20dir;\x0aif(slice\x20>=\x200.0)\x20{\x0apoint.z\x20=\x20(slice\x20/\x202.0)\x20-\x200.5;\x0aif(length(point)\x20>\x200.5)\x20{\x0areturn\x20false;\x0a}\x0a}\x0anormal\x20=\x20normalize(point);\x0apoint\x20-=\x20czm_epsilon2\x20*\x20normal;\x0areturn\x20true;\x0a}\x0abool\x20intersectEllipsoid(vec3\x20origin,\x20vec3\x20dir,\x20vec3\x20center,\x20vec3\x20scale,\x20float\x20slice,\x0aout\x20vec3\x20point,\x20out\x20vec3\x20normal)\x20{\x0aif(scale.x\x20<=\x200.01\x20||\x20scale.y\x20<\x200.01\x20||\x20scale.z\x20<\x200.01)\x20{\x0areturn\x20false;\x0a}\x0avec3\x20o\x20=\x20(origin\x20-\x20center)\x20/\x20scale;\x0avec3\x20d\x20=\x20dir\x20/\x20scale;\x0avec3\x20p,\x20n;\x0abool\x20intersected\x20=\x20intersectSphere(o,\x20d,\x20slice,\x20p,\x20n);\x0aif(intersected)\x20{\x0apoint\x20=\x20(p\x20*\x20scale)\x20+\x20center;\x0anormal\x20=\x20n;\x0a}\x0areturn\x20intersected;\x0a}\x0avec2\x20phaseShift2D(vec2\x20p,\x20vec2\x20freq)\x20{\x0areturn\x20(czm_pi\x20/\x202.0)\x20*\x20sin(freq.yx\x20*\x20p.yx);\x0a}\x0avec2\x20phaseShift3D(vec3\x20p,\x20vec2\x20freq)\x20{\x0areturn\x20phaseShift2D(p.xy,\x20freq)\x20+\x20czm_pi\x20*\x20vec2(sin(freq.x\x20*\x20p.z));\x0a}\x0aconst\x20float\x20T0\x20\x20\x20\x20=\x200.6;\x0aconst\x20float\x20k\x20\x20\x20\x20\x20=\x200.1;\x0aconst\x20float\x20C0\x20\x20\x20\x20=\x200.8;\x0aconst\x20float\x20FX0\x20\x20\x20=\x200.6;\x0aconst\x20float\x20FY0\x20\x20\x20=\x200.6;\x0aconst\x20int\x20octaves\x20=\x205;\x0afloat\x20T(vec3\x20point)\x20{\x0avec2\x20sum\x20=\x20vec2(0.0);\x0afloat\x20Ci\x20=\x20C0;\x0avec2\x20FXY\x20=\x20vec2(FX0,\x20FY0);\x0avec2\x20PXY\x20=\x20vec2(0.0);\x0afor(int\x20i\x20=\x201;\x20i\x20<=\x20octaves;\x20i++)\x20{\x0aPXY\x20=\x20phaseShift3D(point,\x20FXY);\x0aCi\x20*=\x200.707;\x0aFXY\x20*=\x202.0;\x0avec2\x20sinTerm\x20=\x20sin(FXY\x20*\x20point.xy\x20+\x20PXY);\x0asum\x20+=\x20Ci\x20*\x20sinTerm\x20+\x20vec2(T0);\x0a}\x0areturn\x20k\x20*\x20sum.x\x20*\x20sum.y;\x0a}\x0aconst\x20float\x20a\x20=\x200.5;\x0aconst\x20float\x20t\x20=\x200.4;\x0aconst\x20float\x20s\x20=\x200.25;\x0afloat\x20I(float\x20Id,\x20float\x20Is,\x20float\x20It)\x20{\x0areturn\x20(1.0\x20-\x20a)\x20*\x20((1.0\x20-\x20t)\x20*\x20((1.0\x20-\x20s)\x20*\x20Id\x20+\x20s\x20*\x20Is)\x20+\x20t\x20*\x20It)\x20+\x20a;\x0a}\x0aconst\x20vec3\x20lightDir\x20=\x20normalize(vec3(0.2,\x20-1.0,\x200.7));\x0avec4\x20drawCloud(vec3\x20rayOrigin,\x20vec3\x20rayDir,\x20vec3\x20cloudCenter,\x20vec3\x20cloudScale,\x20float\x20cloudSlice,\x0afloat\x20brightness)\x20{\x0avec3\x20cloudPoint,\x20cloudNormal;\x0aif(!intersectEllipsoid(rayOrigin,\x20rayDir,\x20cloudCenter,\x20cloudScale,\x20cloudSlice,\x0acloudPoint,\x20cloudNormal))\x20{\x0areturn\x20vec4(0.0);\x0a}\x0afloat\x20Id\x20=\x20clamp(dot(cloudNormal,\x20-lightDir),\x200.0,\x201.0);\x0afloat\x20Is\x20=\x20max(pow(dot(-lightDir,\x20-rayDir),\x202.0),\x200.0);\x0afloat\x20It\x20=\x20T(cloudPoint);\x0afloat\x20intensity\x20=\x20I(Id,\x20Is,\x20It);\x0avec3\x20color\x20=\x20vec3(intensity\x20*\x20clamp(brightness,\x200.1,\x201.0));\x0avec4\x20noise\x20=\x20sampleNoiseTexture(u_noiseDetail\x20*\x20cloudPoint);\x0afloat\x20W\x20=\x20noise.x;\x0afloat\x20W2\x20=\x20noise.y;\x0afloat\x20W3\x20=\x20noise.z;\x0afloat\x20ndDot\x20=\x20clamp(dot(cloudNormal,\x20-rayDir),\x200.0,\x201.0);\x0afloat\x20TR\x20=\x20pow(ndDot,\x203.0)\x20-\x20W;\x0aTR\x20*=\x201.3;\x0afloat\x20minusDot\x20=\x200.5\x20-\x20ndDot;\x0aTR\x20-=\x20min(minusDot\x20*\x20W2,\x200.0);\x0aTR\x20-=\x200.8\x20*\x20(minusDot\x20+\x200.25)\x20*\x20W3;\x0afloat\x20shading\x20=\x20mix(1.0\x20-\x200.8\x20*\x20W\x20*\x20W,\x201.0,\x20Id\x20*\x20TR);\x0ashading\x20=\x20clamp(shading\x20+\x200.2,\x200.3,\x201.0);\x0avec3\x20finalColor\x20=\x20mix(vec3(0.5),\x20shading\x20*\x20color,\x201.15);\x0areturn\x20vec4(finalColor,\x20clamp(TR,\x200.0,\x201.0))\x20*\x20v_color;\x0a}\x0avoid\x20main()\x20{\x0a#ifdef\x20DEBUG_BILLBOARDS\x0agl_FragColor\x20=\x20vec4(0.0,\x200.5,\x200.5,\x201.0);\x0a#endif\x0avec2\x20coordinate\x20=\x20v_maximumSize.xy\x20*\x20v_offset;\x0avec3\x20ellipsoidScale\x20=\x200.82\x20*\x20v_maximumSize;\x0avec3\x20ellipsoidCenter\x20=\x20vec3(0.0);\x0afloat\x20zOffset\x20=\x20max(ellipsoidScale.z\x20-\x2010.0,\x200.0);\x0avec3\x20eye\x20=\x20vec3(0,\x200,\x20-10.0\x20-\x20zOffset);\x0avec3\x20rayDir\x20=\x20normalize(vec3(coordinate,\x201.0)\x20-\x20eye);\x0avec3\x20rayOrigin\x20=\x20eye;\x0a#ifdef\x20DEBUG_ELLIPSOIDS\x0avec3\x20point,\x20normal;\x0aif(intersectEllipsoid(rayOrigin,\x20rayDir,\x20ellipsoidCenter,\x20ellipsoidScale,\x20v_slice,\x0apoint,\x20normal))\x20{\x0agl_FragColor\x20=\x20v_brightness\x20*\x20v_color;\x0a}\x0a#else\x0a#ifndef\x20DEBUG_BILLBOARDS\x0avec4\x20cloud\x20=\x20drawCloud(rayOrigin,\x20rayDir,\x0aellipsoidCenter,\x20ellipsoidScale,\x20v_slice,\x20v_brightness);\x0aif(cloud.w\x20<\x200.01)\x20{\x0adiscard;\x0a}\x0agl_FragColor\x20=\x20cloud;\x0a#endif\x0a#endif\x0a}\x0a','9076329QMQYcv','1303027JYNBqU','1121242NbHWZl','6430348QIDhFP'];a918_0x12c8=function(){return _0x174d02;};return a918_0x12c8();}