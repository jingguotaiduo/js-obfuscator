/**
 * @license
 * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * * Neither the name of the project nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Modifications made by Cesium GS, Inc.
 */
var a1007_0x2b8604=a1007_0x6e40;function a1007_0x377f(){var _0x2160bd=['55yNsWJB','8fHWeGP','6DFPARl','48580FQHSXg','49366eGdzeq','const\x20float\x20Kr\x20=\x200.0025;\x0aconst\x20float\x20Kr4PI\x20=\x20Kr\x20*\x204.0\x20*\x20czm_pi;\x0aconst\x20float\x20Km\x20=\x200.0015;\x0aconst\x20float\x20Km4PI\x20=\x20Km\x20*\x204.0\x20*\x20czm_pi;\x0aconst\x20float\x20ESun\x20=\x2015.0;\x0aconst\x20float\x20KmESun\x20=\x20Km\x20*\x20ESun;\x0aconst\x20float\x20KrESun\x20=\x20Kr\x20*\x20ESun;\x0aconst\x20vec3\x20InvWavelength\x20=\x20vec3(\x0a5.60204474633241,\x0a9.473284437923038,\x0a19.643802610477206);\x0aconst\x20float\x20rayleighScaleDepth\x20=\x200.25;\x0aconst\x20int\x20nSamples\x20=\x202;\x0aconst\x20float\x20fSamples\x20=\x202.0;\x0aconst\x20float\x20g\x20=\x20-0.95;\x0aconst\x20float\x20g2\x20=\x20g\x20*\x20g;\x0a#ifdef\x20COLOR_CORRECT\x0auniform\x20vec3\x20u_hsbShift;\x0a#endif\x0auniform\x20vec3\x20u_radiiAndDynamicAtmosphereColor;\x0afloat\x20scale(float\x20cosAngle)\x0a{\x0afloat\x20x\x20=\x201.0\x20-\x20cosAngle;\x0areturn\x20rayleighScaleDepth\x20\x20*\x20exp(-0.00287\x20+\x20x*(0.459\x20+\x20x*(3.83\x20+\x20x*(-6.80\x20+\x20x*5.25))));\x0a}\x0avec3\x20getLightDirection(vec3\x20positionWC)\x0a{\x0afloat\x20lightEnum\x20=\x20u_radiiAndDynamicAtmosphereColor.z;\x0avec3\x20lightDirection\x20=\x0apositionWC\x20*\x20float(lightEnum\x20==\x200.0)\x20+\x0aczm_lightDirectionWC\x20*\x20float(lightEnum\x20==\x201.0)\x20+\x0aczm_sunDirectionWC\x20*\x20float(lightEnum\x20==\x202.0);\x0areturn\x20normalize(lightDirection);\x0a}\x0avoid\x20calculateRayScatteringFromSpace(in\x20vec3\x20positionWC,\x20in\x20vec3\x20ray,\x20in\x20float\x20innerRadius,\x20in\x20float\x20outerRadius,\x20inout\x20float\x20far,\x20out\x20vec3\x20start,\x20out\x20float\x20startOffset)\x0a{\x0afloat\x20cameraHeight\x20=\x20length(positionWC);\x0afloat\x20B\x20=\x202.0\x20*\x20dot(positionWC,\x20ray);\x0afloat\x20C\x20=\x20cameraHeight\x20*\x20cameraHeight\x20-\x20outerRadius\x20*\x20outerRadius;\x0afloat\x20det\x20=\x20max(0.0,\x20B\x20*\x20B\x20-\x204.0\x20*\x20C);\x0afloat\x20near\x20=\x200.5\x20*\x20(-B\x20-\x20sqrt(det));\x0astart\x20=\x20positionWC\x20+\x20ray\x20*\x20near;\x0afar\x20-=\x20near;\x0afloat\x20startAngle\x20=\x20dot(ray,\x20start)\x20/\x20outerRadius;\x0afloat\x20startDepth\x20=\x20exp(-1.0\x20/\x20rayleighScaleDepth);\x0astartOffset\x20=\x20startDepth\x20*\x20scale(startAngle);\x0a}\x0avoid\x20calculateRayScatteringFromGround(in\x20vec3\x20positionWC,\x20in\x20vec3\x20ray,\x20in\x20float\x20atmosphereScale,\x20in\x20float\x20innerRadius,\x20out\x20vec3\x20start,\x20out\x20float\x20startOffset)\x0a{\x0afloat\x20cameraHeight\x20=\x20length(positionWC);\x0astart\x20=\x20positionWC;\x0afloat\x20height\x20=\x20length(start);\x0afloat\x20depth\x20=\x20exp((atmosphereScale\x20/\x20rayleighScaleDepth\x20)\x20*\x20(innerRadius\x20-\x20cameraHeight));\x0afloat\x20startAngle\x20=\x20dot(ray,\x20start)\x20/\x20height;\x0astartOffset\x20=\x20depth*scale(startAngle);\x0a}\x0aczm_raySegment\x20rayEllipsoidIntersection(czm_ray\x20ray,\x20vec3\x20inverseRadii)\x0a{\x0avec3\x20o\x20=\x20inverseRadii\x20*\x20(czm_inverseView\x20*\x20vec4(ray.origin,\x201.0)).xyz;\x0avec3\x20d\x20=\x20inverseRadii\x20*\x20(czm_inverseView\x20*\x20vec4(ray.direction,\x200.0)).xyz;\x0afloat\x20a\x20=\x20dot(d,\x20d);\x0afloat\x20b\x20=\x20dot(d,\x20o);\x0afloat\x20c\x20=\x20dot(o,\x20o)\x20-\x201.0;\x0afloat\x20discriminant\x20=\x20b\x20*\x20b\x20-\x20a\x20*\x20c;\x0aif\x20(discriminant\x20<\x200.0)\x0a{\x0areturn\x20czm_emptyRaySegment;\x0a}\x0adiscriminant\x20=\x20sqrt(discriminant);\x0afloat\x20t1\x20=\x20(-b\x20-\x20discriminant)\x20/\x20a;\x0afloat\x20t2\x20=\x20(-b\x20+\x20discriminant)\x20/\x20a;\x0aif\x20(t1\x20<\x200.0\x20&&\x20t2\x20<\x200.0)\x0a{\x0areturn\x20czm_emptyRaySegment;\x0a}\x0aif\x20(t1\x20<\x200.0\x20&&\x20t2\x20>=\x200.0)\x0a{\x0at1\x20=\x200.0;\x0a}\x0areturn\x20czm_raySegment(t1,\x20t2);\x0a}\x0avec3\x20getAdjustedPosition(vec3\x20positionWC,\x20float\x20innerRadius)\x0a{\x0afloat\x20cameraHeight\x20=\x20czm_eyeHeight\x20+\x20innerRadius;\x0areturn\x20normalize(positionWC)\x20*\x20cameraHeight;\x0a}\x0avec3\x20getTranslucentPosition(vec3\x20positionWC,\x20vec3\x20outerPositionWC,\x20float\x20innerRadius,\x20out\x20bool\x20intersectsEllipsoid)\x0a{\x0avec3\x20directionWC\x20=\x20normalize(outerPositionWC\x20-\x20positionWC);\x0avec3\x20directionEC\x20=\x20czm_viewRotation\x20*\x20directionWC;\x0aczm_ray\x20viewRay\x20=\x20czm_ray(vec3(0.0),\x20directionEC);\x0aczm_raySegment\x20raySegment\x20=\x20rayEllipsoidIntersection(viewRay,\x20czm_ellipsoidInverseRadii);\x0aintersectsEllipsoid\x20=\x20raySegment.start\x20>=\x200.0;\x0aif\x20(intersectsEllipsoid)\x0a{\x0areturn\x20positionWC\x20+\x20raySegment.stop\x20*\x20directionWC;\x0a}\x0areturn\x20getAdjustedPosition(positionWC,\x20innerRadius);\x0a}\x0avoid\x20calculateMieColorAndRayleighColor(vec3\x20outerPositionWC,\x20out\x20vec3\x20mieColor,\x20out\x20vec3\x20rayleighColor)\x0a{\x0afloat\x20outerRadius\x20=\x20u_radiiAndDynamicAtmosphereColor.x;\x0afloat\x20innerRadius\x20=\x20u_radiiAndDynamicAtmosphereColor.y;\x0a#ifdef\x20GLOBE_TRANSLUCENT\x0abool\x20intersectsEllipsoid\x20=\x20false;\x0avec3\x20startPositionWC\x20=\x20getTranslucentPosition(czm_viewerPositionWC,\x20outerPositionWC,\x20innerRadius,\x20intersectsEllipsoid);\x0a#else\x0avec3\x20startPositionWC\x20=\x20getAdjustedPosition(czm_viewerPositionWC,\x20innerRadius);\x0a#endif\x0avec3\x20lightDirection\x20=\x20getLightDirection(startPositionWC);\x0avec3\x20ray\x20=\x20outerPositionWC\x20-\x20startPositionWC;\x0afloat\x20far\x20=\x20length(ray);\x0aray\x20/=\x20far;\x0afloat\x20atmosphereScale\x20=\x201.0\x20/\x20(outerRadius\x20-\x20innerRadius);\x0avec3\x20start;\x0afloat\x20startOffset;\x0a#ifdef\x20SKY_FROM_SPACE\x0a#ifdef\x20GLOBE_TRANSLUCENT\x0aif\x20(intersectsEllipsoid)\x0a{\x0acalculateRayScatteringFromGround(startPositionWC,\x20ray,\x20atmosphereScale,\x20innerRadius,\x20start,\x20startOffset);\x0a}\x0aelse\x0a{\x0acalculateRayScatteringFromSpace(startPositionWC,\x20ray,\x20innerRadius,\x20outerRadius,\x20far,\x20start,\x20startOffset);\x0a}\x0a#else\x0acalculateRayScatteringFromSpace(startPositionWC,\x20ray,\x20innerRadius,\x20outerRadius,\x20far,\x20start,\x20startOffset);\x0a#endif\x0a#else\x0acalculateRayScatteringFromGround(startPositionWC,\x20ray,\x20atmosphereScale,\x20innerRadius,\x20start,\x20startOffset);\x0a#endif\x0afloat\x20sampleLength\x20=\x20far\x20/\x20fSamples;\x0afloat\x20scaledLength\x20=\x20sampleLength\x20*\x20atmosphereScale;\x0avec3\x20sampleRay\x20=\x20ray\x20*\x20sampleLength;\x0avec3\x20samplePoint\x20=\x20start\x20+\x20sampleRay\x20*\x200.5;\x0avec3\x20frontColor\x20=\x20vec3(0.0,\x200.0,\x200.0);\x0afor\x20(int\x20i\x20=\x200;\x20i<nSamples;\x20i++)\x0a{\x0afloat\x20height\x20=\x20length(samplePoint);\x0afloat\x20depth\x20=\x20exp((atmosphereScale\x20/\x20rayleighScaleDepth\x20)\x20*\x20(innerRadius\x20-\x20height));\x0afloat\x20fLightAngle\x20=\x20dot(lightDirection,\x20samplePoint)\x20/\x20height;\x0afloat\x20fCameraAngle\x20=\x20dot(ray,\x20samplePoint)\x20/\x20height;\x0afloat\x20fScatter\x20=\x20(startOffset\x20+\x20depth*(scale(fLightAngle)\x20-\x20scale(fCameraAngle)));\x0avec3\x20attenuate\x20=\x20exp(-fScatter\x20*\x20(InvWavelength\x20*\x20Kr4PI\x20+\x20Km4PI));\x0afrontColor\x20+=\x20attenuate\x20*\x20(depth\x20*\x20scaledLength);\x0asamplePoint\x20+=\x20sampleRay;\x0a}\x0amieColor\x20=\x20frontColor\x20*\x20KmESun;\x0arayleighColor\x20=\x20frontColor\x20*\x20(InvWavelength\x20*\x20KrESun);\x0amieColor\x20=\x20min(mieColor,\x20vec3(10000000.0));\x0arayleighColor\x20=\x20min(rayleighColor,\x20vec3(10000000.0));\x0a}\x0avec4\x20calculateFinalColor(vec3\x20positionWC,\x20vec3\x20toCamera,\x20vec3\x20lightDirection,\x20vec3\x20mieColor,\x20vec3\x20rayleighColor)\x0a{\x0afloat\x20cosAngle\x20=\x20dot(lightDirection,\x20normalize(toCamera))\x20/\x20length(toCamera);\x0afloat\x20rayleighPhase\x20=\x200.75\x20*\x20(1.0\x20+\x20cosAngle\x20*\x20cosAngle);\x0afloat\x20miePhase\x20=\x201.5\x20*\x20((1.0\x20-\x20g2)\x20/\x20(2.0\x20+\x20g2))\x20*\x20(1.0\x20+\x20cosAngle\x20*\x20cosAngle)\x20/\x20pow(1.0\x20+\x20g2\x20-\x202.0\x20*\x20g\x20*\x20cosAngle,\x201.5);\x0avec3\x20rgb\x20=\x20rayleighPhase\x20*\x20rayleighColor\x20+\x20miePhase\x20*\x20mieColor;\x0aconst\x20float\x20exposure\x20=\x202.0;\x0avec3\x20rgbExposure\x20=\x20vec3(1.0)\x20-\x20exp(-exposure\x20*\x20rgb);\x0a#ifndef\x20HDR\x0argb\x20=\x20rgbExposure;\x0a#endif\x0a#ifdef\x20COLOR_CORRECT\x0avec3\x20hsb\x20=\x20czm_RGBToHSB(rgb);\x0ahsb.x\x20+=\x20u_hsbShift.x;\x0ahsb.y\x20=\x20clamp(hsb.y\x20+\x20u_hsbShift.y,\x200.0,\x201.0);\x0ahsb.z\x20=\x20hsb.z\x20>\x20czm_epsilon7\x20?\x20hsb.z\x20+\x20u_hsbShift.z\x20:\x200.0;\x0argb\x20=\x20czm_HSBToRGB(hsb);\x0a#endif\x0afloat\x20outerRadius\x20=\x20u_radiiAndDynamicAtmosphereColor.x;\x0afloat\x20innerRadius\x20=\x20u_radiiAndDynamicAtmosphereColor.y;\x0afloat\x20lightEnum\x20=\x20u_radiiAndDynamicAtmosphereColor.z;\x0afloat\x20cameraHeight\x20=\x20czm_eyeHeight\x20+\x20innerRadius;\x0afloat\x20atmosphereAlpha\x20=\x20clamp((outerRadius\x20-\x20cameraHeight)\x20/\x20(outerRadius\x20-\x20innerRadius),\x200.0,\x201.0);\x0afloat\x20nightAlpha\x20=\x20(lightEnum\x20!=\x200.0)\x20?\x20clamp(dot(normalize(positionWC),\x20lightDirection),\x200.0,\x201.0)\x20:\x201.0;\x0aatmosphereAlpha\x20*=\x20pow(nightAlpha,\x200.5);\x0avec4\x20finalColor\x20=\x20vec4(rgb,\x20mix(clamp(rgbExposure.b,\x200.0,\x201.0),\x201.0,\x20atmosphereAlpha)\x20*\x20smoothstep(0.0,\x201.0,\x20czm_morphTime));\x0aif\x20(mieColor.b\x20>\x201.0)\x0a{\x0afloat\x20strength\x20=\x20mieColor.b;\x0afloat\x20minDistance\x20=\x20outerRadius;\x0afloat\x20maxDistance\x20=\x20outerRadius\x20*\x203.0;\x0afloat\x20maxStrengthLerp\x20=\x201.0\x20-\x20clamp((maxDistance\x20-\x20cameraHeight)\x20/\x20(maxDistance\x20-\x20minDistance),\x200.0,\x201.0);\x0afloat\x20maxStrength\x20=\x20mix(100.0,\x2010000.0,\x20maxStrengthLerp);\x0astrength\x20=\x20min(strength,\x20maxStrength);\x0afloat\x20alpha\x20=\x201.0\x20-\x20(strength\x20/\x20maxStrength);\x0afinalColor.a\x20=\x20alpha;\x0a}\x0areturn\x20finalColor;\x0a}\x0a','1404815QLeeYc','15533649HYArbR','1925780TgxuFG','219HlLNSL','21102600myLJYq','13iYhAKd','9763908rusmnR'];a1007_0x377f=function(){return _0x2160bd;};return a1007_0x377f();}(function(_0x2904db,_0x4bac38){var _0x39235d=a1007_0x6e40,_0x4f7228=_0x2904db();while(!![]){try{var _0x5c064e=parseInt(_0x39235d(0x189))/0x1*(-parseInt(_0x39235d(0x182))/0x2)+-parseInt(_0x39235d(0x187))/0x3*(parseInt(_0x39235d(0x181))/0x4)+-parseInt(_0x39235d(0x184))/0x5*(parseInt(_0x39235d(0x180))/0x6)+parseInt(_0x39235d(0x18a))/0x7+-parseInt(_0x39235d(0x17f))/0x8*(parseInt(_0x39235d(0x185))/0x9)+-parseInt(_0x39235d(0x186))/0xa*(-parseInt(_0x39235d(0x17e))/0xb)+parseInt(_0x39235d(0x188))/0xc;if(_0x5c064e===_0x4bac38)break;else _0x4f7228['push'](_0x4f7228['shift']());}catch(_0x47aa5d){_0x4f7228['push'](_0x4f7228['shift']());}}}(a1007_0x377f,0xdc308));function a1007_0x6e40(_0x1179e3,_0x539e1b){var _0x377fdc=a1007_0x377f();return a1007_0x6e40=function(_0x6e4042,_0x178af3){_0x6e4042=_0x6e4042-0x17e;var _0x5bf881=_0x377fdc[_0x6e4042];return _0x5bf881;},a1007_0x6e40(_0x1179e3,_0x539e1b);}export default a1007_0x2b8604(0x183);